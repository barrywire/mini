# Identifiers

<identifier> ::= <first_char> ( <char>* | '_'* )
<char> ::= <letter_uppercase> | <letter_lowercase> | <combination_titlecase> | <combination_camelcase>
<letter_uppercase> ::= "A" ... "Z"
<letter_lowercase> ::= "a" ... "z"
<combination_titlecase> ::= "A...Z""a...z"
<combination_camelcase> ::= "A"..."Z""a"..."z""A"..."Z""a"..."z" | "a"..."z""A"..."Z""a"..."z"


# Keywords

VAR 
AND 
OR
NOT
IF 
THEN 
ELIF x
ELSE 
FOR 
TO 
WHILE 
FUN 
END 
RETURN 
CONTINUE 
BREAK
END
EOF

# Numbers

<number> ::= <digit> | <float>
<digit> ::= "0" | "1" | ... | "9" 
<float> ::= <digit> . <digit>


# Strings

<string> ::= '"' <char>* '"' 
<char> ::= any printable ASCII character except double quote (") or new
     line ('\n')


# Operators

<arithmetic_operator> ::= "+" | "-" | "*" | "/" 
<comparison_operator> ::= "<" | ">" | "=" | "<=" | ">=" | "!="

# Expressions
    # Arithmetic expression
        <arithmetic_expression> ::= <term> | "+"| "-"<term> 
        <term> ::= <factor> "*"|"/" <factor> 
        <factor> ::= "+"| "-" <number> | "(" <arithmetic_expression> ")" 
        <number> ::= <digit> | <float>

    # Comparison expression
        <comparison_expression>::= <arithmetic_expression> <comparison_operator> <arithmetic_expression>

    # Assignment expression
        <assignment_operator> ::= <identifier> "=" <number> | <string>

# Control Structures
    # While ... Then
        <while_then> ::= WHILE <expression> THEN <statement>
    # If ... Then
        <if_then> ::= IF <expression> THEN <statement> | <else_if> | <else>
        <else_if> ::= ELIF <expression> THEN <statement> | <else_if> | <else>
        <else> ::= ELSE <statement>


